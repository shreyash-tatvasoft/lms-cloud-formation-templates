AWSTemplateFormatVersion: '2010-09-09'
Description: CI/CD with ASG + ALB for Node.js App on Port 8000

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 KeyPair for SSH access
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.micro
      - t3.medium
    Description: EC2 instance type
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  GitHubRepo:
    Type: String
    Description: GitHub repository in the format owner/repo
    Default: shreyash-tatvasoft/LMS-BE
  GitHubBranch:
    Type: String
    Default: main
  CodeStarConnectionArn:
    Type: String
    Description: ARN of CodeStar Connection (for GitHub)
  JwtSecret:
    Type: String
    Default: supersecretjwtkey
  RDSStackName:
    Type: String
    Description: "The stack name of the RDS stack"
  AlarmEmail:
    Type: String
    Description: Email address to subscribe to SNS topic

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0de716d6197524dd9
    us-west-1:
      AMI: ami-01776cde0c6f0677c
    ap-south-1:
      AMI: ami-0144277607031eca2

Resources:
  # ---------------------- Security Groups ----------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP on 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: lms-dev-be-alb-sg

  # Bastion Host Security Group (for Public Subnet)
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from the internet to Bastion Host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0   # Allow SSH from anywhere to bastion Host
      Tags:
        - Key: Name
          Value: lms-dev-be-sg-bastion-host

  # Private EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to EC2 on port 8000 and SSH From Bastion Host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: lms-dev-be-sg-ec2

  # ---------------------- ALB & Target Group ----------------------
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: lms-dev-be-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref PublicSubnets

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Name: lms-dev-be-tg
      Port: 8000
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: "8000"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  RDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSStackName
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref EC2SecurityGroup
  
  JwtSecretParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/myapp/JWT_SECRET"
      Type: String
      Value: !Ref JwtSecret

  # ---------------------- IAM Roles ----------------------
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      Policies:
      - PolicyName: AllowSSMParameters
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/myapp/*"
      - PolicyName: CloudWatchAgentAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudwatch:PutMetricData
              Resource: "*"


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole
  
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Policies:
        - PolicyName: AllowTaggingForCodeDeploy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - autoscaling:CreateOrUpdateTags
                  - autoscaling:DeleteTags
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      Policies:
        - PolicyName: CodeStarConnectionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref CodeStarConnectionArn

  # ---------------------- Launch Template & ASG ----------------------
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: lms-dev-be-lt
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: lms-dev-be-ec2
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash 
            # Install Node.js and npm (Amazon Linux 2) 
            curl -sL https://rpm.nodesource.com/setup_18.x | sudo -E bash - 
            sudo yum install -y nodejs 
            #!/bin/bash 
            yum update -y 
            yum install ruby wget -y 
            cd /home/ec2-user 
            wget https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install 
            chmod +x ./install 
            ./install auto 
            systemctl start codedeploy-agent 
            systemctl enable codedeploy-agent
            # Install CloudWatch Agent
            #!/bin/bash
            yum update -y
            yum install -y amazon-cloudwatch-agent
            # CloudWatch Agent Config
            cat <<EOF >/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/home/ec2-user/.pm2/logs/*-out.log",
                        "log_group_name": "lms-backend-log",
                        "log_stream_name": "success-logs/{instance_id}-out",
                        "timestamp_format": "%Y-%m-%d %H:%M:%S"
                      },
                      {
                        "file_path": "/home/ec2-user/.pm2/logs/*-error.log",
                        "log_group_name": "lms-backend-log",
                        "log_stream_name": "error-logs/{instance_id}-error",
                        "timestamp_format": "%Y-%m-%d %H:%M:%S"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            systemctl enable amazon-cloudwatch-agent
            systemctl restart amazon-cloudwatch-agent

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: lms-dev-be-asg
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  # ---------------------- S3 Artifact Bucket ----------------------
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "lms-dev-be-s3-09-2025"
    
  # ---------------------- CodeDeploy ----------------------
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt ALBTargetGroup.TargetGroupName

  # ---------------------- CodeBuild ----------------------
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: lms-dev-be-node-build
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 30

  # ---------------------- CodePipeline ----------------------
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: lms-dev-be-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Ref GitHubRepo
                BranchName: !Ref GitHubBranch
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId: 
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 1
              Configuration: 
                CustomData: "Please approve this deployment before proceeding."
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup

  # ---------------------- CloudFront ----------------------
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
          - Key: Name
            Value: lms-dev-be-cloudfront
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: alb-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: ["GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          CachedMethods: ["GET", "HEAD"]
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: true
            Headers:
              - "*"
        Origins:
          - DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            Id: alb-origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultRootObject: ""

  # ----------------------- SNS Topic for CPU Alarm ------------------------
  AsgCpuAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: App-Server-SNS
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlarmEmail

  # ------------------------ CloudWatch Alarm for ASG CPU -------------------
  AsgCpuUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if average CPU utilization of ASG goes above 50%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup   # <-- Direct reference to ASG resource
      Statistic: Average
      Period: 300                        # 5 minutes (set 60 if detailed monitoring enabled)
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AsgCpuAlarmTopic
      OKActions:
        - !Ref AsgCpuAlarmTopic
      Unit: Percent

  # ------------------------ CloudWatch Dashboard for ASG CPU ----------------------
  AsgCpuUtilizationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: lms-dev-be-cloudwatch-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${AutoScalingGroup}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "CPU Utilization for ASG: ${AutoScalingGroup}"
              }
            }
          ]
        }

Outputs:
  ALBURL:
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
  
  BackendCloudFrontURL:
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
